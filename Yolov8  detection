from ultralytics import YOLO
import cv2
import easyocr

# Load YOLOv8 model (helmet + no_helmet + number_plate trained)
model = YOLO("yolov8n.pt")  # Use custom trained model if available

# EasyOCR reader
reader = easyocr.Reader(['en'])

# YOLO class names
class_names = model.names

# Function to process YOLO results
def process_results(results, frame):
    for r in results:
        for box in r.boxes:
            cls_id = int(box.cls[0])
            cls_name = class_names.get(cls_id, "Unknown")
            conf = float(box.conf[0])

            x1, y1, x2, y2 = map(int, box.xyxy[0])

            # Draw bounding box
            color = (0, 255, 0) if cls_name == "helmet" else (0, 0, 255)
            cv2.rectangle(frame, (x1, y1), (x2, y2), color, 2)
            cv2.putText(frame, f"{cls_name} {conf:.2f}", (x1, y1 - 10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.6, color, 2)

            # If no helmet detected, apply OCR in that region
            if cls_name == "no_helmet":
                # Assume number plate is nearby, adjust ROI as needed
                plate_area = frame[y2:y2+50, x1:x2]  # below the head area
                ocr_results = reader.readtext(plate_area)

                for (bbox, text, prob) in ocr_results:
                    if prob > 0.3:  # adjust threshold
                        print(f"NO HELMET | Number Plate: {text} | Conf: {prob:.2f}")
                        cv2.putText(frame, f"Plate: {text}", (x1, y2 + 60),
                                    cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 0), 2)

# Video capture
cap = cv2.VideoCapture(0)

while True:
    ret, frame = cap.read()
    if not ret:
        break

    results = model(frame)
    process_results(results, frame)

    cv2.imshow("Helmet + OCR", frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
